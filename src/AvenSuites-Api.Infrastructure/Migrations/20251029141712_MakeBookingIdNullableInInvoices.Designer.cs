// <auto-generated />
using System;
using AvenSuitesApi.Infrastructure.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AvenSuitesApi.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251029141712_MakeBookingIdNullableInInvoices")]
    partial class MakeBookingIdNullableInInvoices
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("AmenityRoomType", b =>
                {
                    b.Property<Guid>("AmenitiesId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoomTypesId")
                        .HasColumnType("char(36)");

                    b.HasKey("AmenitiesId", "RoomTypesId");

                    b.HasIndex("RoomTypesId");

                    b.ToTable("AmenityRoomType");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.Amenity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.HasKey("Id");

                    b.ToTable("Amenities");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.ApiIdempotencyKey", b =>
                {
                    b.Property<string>("IdempotencyKey")
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RequestHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("ResponseBody")
                        .HasColumnType("longtext");

                    b.Property<int?>("ResponseCode")
                        .HasColumnType("int");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.HasKey("IdempotencyKey");

                    b.HasIndex("ExpiresAt");

                    b.ToTable("ApiIdempotencyKeys");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<Guid?>("ActorUserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ChangesJson")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("char(36)");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<Guid?>("HotelId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<short>("Adults")
                        .HasColumnType("smallint");

                    b.Property<string>("ChannelRef")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("datetime(6)");

                    b.Property<short>("Children")
                        .HasColumnType("smallint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("MainGuestId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("HotelId");

                    b.HasIndex("MainGuestId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.BookingGuest", b =>
                {
                    b.Property<Guid>("BookingId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("GuestId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("BookingId", "GuestId");

                    b.HasIndex("GuestId");

                    b.ToTable("BookingGuests");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.BookingPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.ToTable("BookingPayments");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.BookingRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<decimal>("PriceTotal")
                        .HasColumnType("decimal(65,30)");

                    b.Property<Guid?>("RatePlanId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoomTypeId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("RatePlanId");

                    b.HasIndex("RoomId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("BookingRooms");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.BookingRoomNight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BookingRoomId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("PriceAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("StayDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("BookingRoomId");

                    b.HasIndex("RoomId", "StayDate")
                        .IsUnique();

                    b.ToTable("BookingRoomNights");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.BookingStatusHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ChangedBy")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ChangedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("NewStatus")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Notes")
                        .HasMaxLength(240)
                        .HasColumnType("varchar(240)");

                    b.Property<string>("OldStatus")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("ChangedByUserId");

                    b.ToTable("BookingStatusHistories");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.ChatMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ContentText")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("MessageIdExt")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("RawPayload")
                        .HasColumnType("longtext");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.ChatSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("GuestId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("LastInteractionAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("StateJson")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("WaUserJid")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("GuestId");

                    b.HasIndex("HotelId");

                    b.ToTable("ChatSessions");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.ErpIntegrationLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("BookingId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Endpoint")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<Guid?>("InvoiceId")
                        .HasColumnType("char(36)");

                    b.Property<string>("RequestJson")
                        .HasColumnType("longtext");

                    b.Property<string>("ResponseJson")
                        .HasColumnType("longtext");

                    b.Property<bool>("Success")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("ErpIntegrationLogs");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.Guest", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("MarketingConsent")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.ToTable("Guests");

                    b.HasData(
                        new
                        {
                            Id = new Guid("87f086dd-d461-49c8-a63c-1fc7b6a55441"),
                            CreatedAt = new DateTime(2025, 10, 29, 14, 17, 10, 208, DateTimeKind.Utc).AddTicks(2937),
                            HotelId = new Guid("7a326969-3bf6-40d9-96dc-1aecef585000"),
                            MarketingConsent = false,
                            UpdatedAt = new DateTime(2025, 10, 29, 14, 17, 10, 208, DateTimeKind.Utc).AddTicks(2937)
                        });
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.GuestPii", b =>
                {
                    b.Property<Guid>("GuestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AddressLine1")
                        .HasMaxLength(160)
                        .HasColumnType("varchar(160)");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(160)
                        .HasColumnType("varchar(160)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("City")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<byte[]>("DocumentCipher")
                        .HasColumnType("longblob");

                    b.Property<int>("DocumentKeyVersion")
                        .HasColumnType("int");

                    b.Property<byte[]>("DocumentNonce")
                        .HasColumnType("longblob");

                    b.Property<string>("DocumentPlain")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("DocumentSha256")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<byte[]>("DocumentTag")
                        .HasColumnType("longblob");

                    b.Property<string>("DocumentType")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Email")
                        .HasMaxLength(320)
                        .HasColumnType("varchar(320)");

                    b.Property<string>("EmailSha256")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("PhoneE164")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PhoneSha256")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("State")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("GuestId");

                    b.HasIndex("DocumentSha256");

                    b.HasIndex("EmailSha256");

                    b.HasIndex("PhoneSha256");

                    b.ToTable("GuestPii");

                    b.HasData(
                        new
                        {
                            GuestId = new Guid("87f086dd-d461-49c8-a63c-1fc7b6a55441"),
                            AddressLine1 = "MONSENHOR GERCINO, S/N",
                            AddressLine2 = "NÃO INFORMADO",
                            City = "Joinville",
                            CountryCode = "BR",
                            CreatedAt = new DateTime(2025, 10, 29, 14, 17, 10, 208, DateTimeKind.Utc).AddTicks(2937),
                            DocumentKeyVersion = 1,
                            DocumentPlain = "791.300.709-53",
                            DocumentSha256 = "c4fa5ddbd59571fba8f6bf9ab1bd9eb62d2f334bdebdb4d6be93c64fd6c478d4",
                            DocumentType = "CPF",
                            FullName = "Joni Cardoso",
                            PostalCode = "89230-290",
                            State = "SC",
                            UpdatedAt = new DateTime(2025, 10, 29, 14, 17, 10, 208, DateTimeKind.Utc).AddTicks(2937)
                        });
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.Hotel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AddressLine1")
                        .HasMaxLength(160)
                        .HasColumnType("varchar(160)");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(160)
                        .HasColumnType("varchar(160)");

                    b.Property<string>("City")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("Cnpj")
                        .HasMaxLength(18)
                        .HasColumnType("varchar(18)");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasMaxLength(320)
                        .HasColumnType("varchar(320)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("PhoneE164")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("State")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Timezone")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("TradeName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Hotels");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7a326969-3bf6-40d9-96dc-1aecef585000"),
                            AddressLine1 = "Av. Dr. Nereu Ramos, 474",
                            AddressLine2 = "Rocio Grande, São Francisco do Sul - SC",
                            City = "São Francisco do Sul",
                            Cnpj = "83.630.657/0001-60",
                            CountryCode = "BR",
                            CreatedAt = new DateTime(2025, 10, 29, 14, 17, 10, 157, DateTimeKind.Utc).AddTicks(9808),
                            Email = "gjose2980@gmail.com",
                            Name = "Hotel Avenida",
                            PhoneE164 = "+554799662998",
                            PostalCode = "89331-260",
                            State = "SC",
                            Status = "ACTIVE",
                            Timezone = "America/Sao_Paulo",
                            TradeName = "Hotel Avenida",
                            UpdatedAt = new DateTime(2025, 10, 29, 14, 17, 10, 157, DateTimeKind.Utc).AddTicks(9947)
                        });
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.HotelKey", b =>
                {
                    b.Property<Guid>("HotelId")
                        .HasColumnType("char(36)");

                    b.Property<int>("KeyVersion")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<byte[]>("KdfSalt")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.HasKey("HotelId", "KeyVersion");

                    b.ToTable("HotelKeys");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.IntegrationEventInbox", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ConsumedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EventIdExt")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("PayloadHash")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("IntegrationEventInbox");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.IntegrationEventOutbox", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("char(36)");

                    b.Property<string>("AggregateType")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<int>("Attempts")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("LastError")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("PayloadJson")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.ToTable("IntegrationEventOutbox");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("BookingId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ErpProtocol")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("ErpProvider")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("IssueDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NfseNumber")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("NfseSeries")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("PdfS3Key")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("RawResponseJson")
                        .HasColumnType("longtext");

                    b.Property<string>("RpsNumber")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<decimal>("TotalServices")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TotalTaxes")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("VerificationCode")
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("XmlS3Key")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.HasIndex("HotelId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.InvoiceItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(240)
                        .HasColumnType("varchar(240)");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("TaxCode")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<decimal?>("TaxRate")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceItems");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.IpmCredentials", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("CityCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CpfCnpj")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("SerieNfse")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("HotelId")
                        .IsUnique();

                    b.ToTable("IpmCredentials");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0891eb4a-28ae-46bd-8a77-2c2047c54716"),
                            Active = true,
                            CityCode = "8319",
                            CpfCnpj = "83.630.657/0001-60",
                            CreatedAt = new DateTime(2025, 10, 29, 14, 17, 10, 208, DateTimeKind.Utc).AddTicks(2531),
                            HotelId = new Guid("7a326969-3bf6-40d9-96dc-1aecef585000"),
                            Password = "h7MBnnzoNN+uaBOBW9xSqg6ZoOdAI8uTHDoBVj+w3YU=",
                            SerieNfse = "1",
                            UpdatedAt = new DateTime(2025, 10, 29, 14, 17, 10, 208, DateTimeKind.Utc).AddTicks(2678),
                            Username = "83.630.657/0001-60"
                        });
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.MaintenanceBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Reason")
                        .HasMaxLength(240)
                        .HasColumnType("varchar(240)");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("MaintenanceBlocks");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.NotificationLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Body")
                        .HasColumnType("longtext");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ProviderMessageId")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<Guid?>("RelatedBookingId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("RelatedInvoiceId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Subject")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("TemplateKey")
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("TemplateKey1")
                        .HasColumnType("varchar(80)");

                    b.Property<string>("ToAddress")
                        .HasMaxLength(320)
                        .HasColumnType("varchar(320)");

                    b.Property<string>("ToWhatsapp")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("TemplateKey1");

                    b.ToTable("NotificationLogs");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.NotificationTemplate", b =>
                {
                    b.Property<string>("TemplateKey")
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("BodyTemplate")
                        .HasColumnType("longtext");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SubjectTemplate")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("TemplateKey");

                    b.ToTable("NotificationTemplates");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.RatePlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("CancellationPolicy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("char(36)");

                    b.Property<string>("MealPlan")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<Guid>("RoomTypeId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("RatePlans");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.RatePlanPrice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MaxStay")
                        .HasColumnType("int");

                    b.Property<int?>("MinStay")
                        .HasColumnType("int");

                    b.Property<decimal>("PriceAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("PriceDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("RatePlanId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("RatePlanId");

                    b.ToTable("RatePlanPrices");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("60ccaec1-6c42-4fb5-a104-2036b42585a3"),
                            CreatedAt = new DateTime(2025, 10, 29, 14, 17, 10, 79, DateTimeKind.Utc).AddTicks(2793),
                            Description = "Administrator role with full access",
                            IsActive = true,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("27648377-84b3-44ef-b9b0-45c9cd8fd9fc"),
                            CreatedAt = new DateTime(2025, 10, 29, 14, 17, 10, 79, DateTimeKind.Utc).AddTicks(3065),
                            Description = "Standard user role",
                            IsActive = true,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Floor")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("char(36)");

                    b.Property<string>("RoomNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<Guid>("RoomTypeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4cdcf044-587e-4047-b164-a8cd64bad303"),
                            CreatedAt = new DateTime(2025, 10, 29, 14, 17, 10, 205, DateTimeKind.Utc).AddTicks(4671),
                            Floor = "1",
                            HotelId = new Guid("7a326969-3bf6-40d9-96dc-1aecef585000"),
                            RoomNumber = "101",
                            RoomTypeId = new Guid("2318702e-1c6d-4d1c-8f07-d6e0ace9d441"),
                            Status = "ACTIVE",
                            UpdatedAt = new DateTime(2025, 10, 29, 14, 17, 10, 205, DateTimeKind.Utc).AddTicks(4805)
                        },
                        new
                        {
                            Id = new Guid("bd823cb6-d7a4-45ae-9853-66895ea593bb"),
                            CreatedAt = new DateTime(2025, 10, 29, 14, 17, 10, 205, DateTimeKind.Utc).AddTicks(4929),
                            Floor = "1",
                            HotelId = new Guid("7a326969-3bf6-40d9-96dc-1aecef585000"),
                            RoomNumber = "102",
                            RoomTypeId = new Guid("2318702e-1c6d-4d1c-8f07-d6e0ace9d441"),
                            Status = "ACTIVE",
                            UpdatedAt = new DateTime(2025, 10, 29, 14, 17, 10, 205, DateTimeKind.Utc).AddTicks(4929)
                        },
                        new
                        {
                            Id = new Guid("6bd29bd5-4826-45a0-b734-3197fec5cfbd"),
                            CreatedAt = new DateTime(2025, 10, 29, 14, 17, 10, 205, DateTimeKind.Utc).AddTicks(4931),
                            Floor = "1",
                            HotelId = new Guid("7a326969-3bf6-40d9-96dc-1aecef585000"),
                            RoomNumber = "103",
                            RoomTypeId = new Guid("2318702e-1c6d-4d1c-8f07-d6e0ace9d441"),
                            Status = "ACTIVE",
                            UpdatedAt = new DateTime(2025, 10, 29, 14, 17, 10, 205, DateTimeKind.Utc).AddTicks(4932)
                        },
                        new
                        {
                            Id = new Guid("40d5718c-dbda-40c7-a4f4-644cd6f177bd"),
                            CreatedAt = new DateTime(2025, 10, 29, 14, 17, 10, 205, DateTimeKind.Utc).AddTicks(4933),
                            Floor = "1",
                            HotelId = new Guid("7a326969-3bf6-40d9-96dc-1aecef585000"),
                            RoomNumber = "11",
                            RoomTypeId = new Guid("e9e7976d-59fd-4bda-9468-4d5fdb6feec5"),
                            Status = "ACTIVE",
                            UpdatedAt = new DateTime(2025, 10, 29, 14, 17, 10, 205, DateTimeKind.Utc).AddTicks(4934)
                        });
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.RoomType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<short>("CapacityAdults")
                        .HasColumnType("smallint");

                    b.Property<short>("CapacityChildren")
                        .HasColumnType("smallint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.ToTable("RoomTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2318702e-1c6d-4d1c-8f07-d6e0ace9d441"),
                            Active = true,
                            BasePrice = 150.00m,
                            CapacityAdults = (short)2,
                            CapacityChildren = (short)1,
                            Code = "STD",
                            CreatedAt = new DateTime(2025, 10, 29, 14, 17, 10, 205, DateTimeKind.Utc).AddTicks(2493),
                            Description = "Quarto padrão com cama de casal",
                            HotelId = new Guid("7a326969-3bf6-40d9-96dc-1aecef585000"),
                            Name = "Standard",
                            UpdatedAt = new DateTime(2025, 10, 29, 14, 17, 10, 205, DateTimeKind.Utc).AddTicks(2630)
                        },
                        new
                        {
                            Id = new Guid("e9e7976d-59fd-4bda-9468-4d5fdb6feec5"),
                            Active = true,
                            BasePrice = 130.00m,
                            CapacityAdults = (short)1,
                            CapacityChildren = (short)0,
                            Code = "BSC",
                            CreatedAt = new DateTime(2025, 10, 29, 14, 17, 10, 205, DateTimeKind.Utc).AddTicks(2760),
                            Description = "Quarto básico com cama de casal",
                            HotelId = new Guid("7a326969-3bf6-40d9-96dc-1aecef585000"),
                            Name = "Basic",
                            UpdatedAt = new DateTime(2025, 10, 29, 14, 17, 10, 205, DateTimeKind.Utc).AddTicks(2760)
                        });
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid?>("HotelId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("HotelId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f36d8acd-1822-4019-ac76-a6ea959d5193"),
                            CreatedAt = new DateTime(2025, 10, 29, 14, 17, 10, 157, DateTimeKind.Utc).AddTicks(4203),
                            Email = "admin@avensuites.com",
                            IsActive = true,
                            Name = "Administrator",
                            PasswordHash = "$argon2i$v=19$m=4096,t=2,p=2$HUUHRdtkoxoh3zV2p5sRig$Gmy7cLPa7fRUofrOXrdgdaUBku9KXzGvYT4tY6LPG1Y"
                        },
                        new
                        {
                            Id = new Guid("2975cf19-0baa-4507-9f98-968760deb546"),
                            CreatedAt = new DateTime(2025, 10, 29, 14, 17, 10, 204, DateTimeKind.Utc).AddTicks(7634),
                            Email = "gjose2980@gmail.com",
                            IsActive = true,
                            Name = "Gustavo",
                            PasswordHash = "$argon2i$v=19$m=4096,t=2,p=2$xhttTBbBsHOWDd79wY9C8Q$ZYpppN25AdVtMVIk1mO7QGuyLPFXVV2xo0Qf7hG0Xr8",
                            UpdatedAt = new DateTime(2025, 10, 29, 14, 17, 10, 204, DateTimeKind.Utc).AddTicks(7637)
                        });
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("f36d8acd-1822-4019-ac76-a6ea959d5193"),
                            RoleId = new Guid("60ccaec1-6c42-4fb5-a104-2036b42585a3"),
                            AssignedAt = new DateTime(2025, 10, 29, 14, 17, 10, 157, DateTimeKind.Utc).AddTicks(5840)
                        },
                        new
                        {
                            UserId = new Guid("2975cf19-0baa-4507-9f98-968760deb546"),
                            RoleId = new Guid("60ccaec1-6c42-4fb5-a104-2036b42585a3"),
                            AssignedAt = new DateTime(2025, 10, 29, 14, 17, 10, 204, DateTimeKind.Utc).AddTicks(9093)
                        });
                });

            modelBuilder.Entity("AmenityRoomType", b =>
                {
                    b.HasOne("AvenSuitesApi.Domain.Entities.Amenity", null)
                        .WithMany()
                        .HasForeignKey("AmenitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AvenSuitesApi.Domain.Entities.RoomType", null)
                        .WithMany()
                        .HasForeignKey("RoomTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.Booking", b =>
                {
                    b.HasOne("AvenSuitesApi.Domain.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("AvenSuitesApi.Domain.Entities.Hotel", "Hotel")
                        .WithMany("Bookings")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AvenSuitesApi.Domain.Entities.Guest", "MainGuest")
                        .WithMany("Bookings")
                        .HasForeignKey("MainGuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Hotel");

                    b.Navigation("MainGuest");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.BookingGuest", b =>
                {
                    b.HasOne("AvenSuitesApi.Domain.Entities.Booking", "Booking")
                        .WithMany("BookingGuests")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AvenSuitesApi.Domain.Entities.Guest", "Guest")
                        .WithMany("GuestBookings")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.BookingPayment", b =>
                {
                    b.HasOne("AvenSuitesApi.Domain.Entities.Booking", "Booking")
                        .WithMany("Payments")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.BookingRoom", b =>
                {
                    b.HasOne("AvenSuitesApi.Domain.Entities.Booking", "Booking")
                        .WithMany("BookingRooms")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AvenSuitesApi.Domain.Entities.RatePlan", "RatePlan")
                        .WithMany("BookingRooms")
                        .HasForeignKey("RatePlanId");

                    b.HasOne("AvenSuitesApi.Domain.Entities.Room", "Room")
                        .WithMany("BookingRooms")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AvenSuitesApi.Domain.Entities.RoomType", "RoomType")
                        .WithMany("BookingRooms")
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("RatePlan");

                    b.Navigation("Room");

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.BookingRoomNight", b =>
                {
                    b.HasOne("AvenSuitesApi.Domain.Entities.BookingRoom", "BookingRoom")
                        .WithMany("Nights")
                        .HasForeignKey("BookingRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AvenSuitesApi.Domain.Entities.Room", "Room")
                        .WithMany("BookingRoomNights")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingRoom");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.BookingStatusHistory", b =>
                {
                    b.HasOne("AvenSuitesApi.Domain.Entities.Booking", "Booking")
                        .WithMany("StatusHistory")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AvenSuitesApi.Domain.Entities.User", "ChangedByUser")
                        .WithMany()
                        .HasForeignKey("ChangedByUserId");

                    b.Navigation("Booking");

                    b.Navigation("ChangedByUser");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.ChatMessage", b =>
                {
                    b.HasOne("AvenSuitesApi.Domain.Entities.ChatSession", "Session")
                        .WithMany("Messages")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.ChatSession", b =>
                {
                    b.HasOne("AvenSuitesApi.Domain.Entities.Guest", "Guest")
                        .WithMany()
                        .HasForeignKey("GuestId");

                    b.HasOne("AvenSuitesApi.Domain.Entities.Hotel", "Hotel")
                        .WithMany("ChatSessions")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guest");

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.ErpIntegrationLog", b =>
                {
                    b.HasOne("AvenSuitesApi.Domain.Entities.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId");

                    b.HasOne("AvenSuitesApi.Domain.Entities.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId");

                    b.Navigation("Booking");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.Guest", b =>
                {
                    b.HasOne("AvenSuitesApi.Domain.Entities.Hotel", "Hotel")
                        .WithMany("Guests")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AvenSuitesApi.Domain.Entities.GuestPii", "GuestPii")
                        .WithOne("Guest")
                        .HasForeignKey("AvenSuitesApi.Domain.Entities.Guest", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GuestPii");

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.HotelKey", b =>
                {
                    b.HasOne("AvenSuitesApi.Domain.Entities.Hotel", "Hotel")
                        .WithMany("HotelKeys")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.Invoice", b =>
                {
                    b.HasOne("AvenSuitesApi.Domain.Entities.Booking", "Booking")
                        .WithOne("Invoice")
                        .HasForeignKey("AvenSuitesApi.Domain.Entities.Invoice", "BookingId");

                    b.HasOne("AvenSuitesApi.Domain.Entities.Hotel", "Hotel")
                        .WithMany("Invoices")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.InvoiceItem", b =>
                {
                    b.HasOne("AvenSuitesApi.Domain.Entities.Invoice", "Invoice")
                        .WithMany("Items")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.IpmCredentials", b =>
                {
                    b.HasOne("AvenSuitesApi.Domain.Entities.Hotel", "Hotel")
                        .WithOne()
                        .HasForeignKey("AvenSuitesApi.Domain.Entities.IpmCredentials", "HotelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.MaintenanceBlock", b =>
                {
                    b.HasOne("AvenSuitesApi.Domain.Entities.Room", "Room")
                        .WithMany("MaintenanceBlocks")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.NotificationLog", b =>
                {
                    b.HasOne("AvenSuitesApi.Domain.Entities.NotificationTemplate", "Template")
                        .WithMany("NotificationLogs")
                        .HasForeignKey("TemplateKey1");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.RatePlan", b =>
                {
                    b.HasOne("AvenSuitesApi.Domain.Entities.Hotel", "Hotel")
                        .WithMany("RatePlans")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AvenSuitesApi.Domain.Entities.RoomType", "RoomType")
                        .WithMany("RatePlans")
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.RatePlanPrice", b =>
                {
                    b.HasOne("AvenSuitesApi.Domain.Entities.RatePlan", "RatePlan")
                        .WithMany("Prices")
                        .HasForeignKey("RatePlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RatePlan");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.Room", b =>
                {
                    b.HasOne("AvenSuitesApi.Domain.Entities.Hotel", "Hotel")
                        .WithMany("Rooms")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AvenSuitesApi.Domain.Entities.RoomType", "RoomType")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.RoomType", b =>
                {
                    b.HasOne("AvenSuitesApi.Domain.Entities.Hotel", "Hotel")
                        .WithMany("RoomTypes")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.User", b =>
                {
                    b.HasOne("AvenSuitesApi.Domain.Entities.Hotel", null)
                        .WithMany("Users")
                        .HasForeignKey("HotelId");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("AvenSuitesApi.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AvenSuitesApi.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.Booking", b =>
                {
                    b.Navigation("BookingGuests");

                    b.Navigation("BookingRooms");

                    b.Navigation("Invoice");

                    b.Navigation("Payments");

                    b.Navigation("StatusHistory");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.BookingRoom", b =>
                {
                    b.Navigation("Nights");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.ChatSession", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.Guest", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("GuestBookings");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.GuestPii", b =>
                {
                    b.Navigation("Guest")
                        .IsRequired();
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.Hotel", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("ChatSessions");

                    b.Navigation("Guests");

                    b.Navigation("HotelKeys");

                    b.Navigation("Invoices");

                    b.Navigation("RatePlans");

                    b.Navigation("RoomTypes");

                    b.Navigation("Rooms");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.Invoice", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.NotificationTemplate", b =>
                {
                    b.Navigation("NotificationLogs");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.RatePlan", b =>
                {
                    b.Navigation("BookingRooms");

                    b.Navigation("Prices");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.Room", b =>
                {
                    b.Navigation("BookingRoomNights");

                    b.Navigation("BookingRooms");

                    b.Navigation("MaintenanceBlocks");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.RoomType", b =>
                {
                    b.Navigation("BookingRooms");

                    b.Navigation("RatePlans");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("AvenSuitesApi.Domain.Entities.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
